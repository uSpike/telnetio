[tool.poetry]
name = "telnetio"
version = "0.3.0"
description = "Sans-IO telnet parser"
authors = ["Jordan Speicher <jordan@jspeicher.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/uSpike/telnetio"
classifiers = [
    "Framework :: AnyIO"
]
packages = [
    { include = "telnetio", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.10"
anyio = {version = "^4", optional = true}

[tool.poetry.dev-dependencies]
anyio = "^4.0.0"
pytest = "^8.0.0"
mypy = "^1.0"
pytest-cov = "^4.0"

[tool.poetry.extras]
anyio = ["anyio"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
python_version = "3.10"
strict = true
show_column_numbers = true
show_error_codes = true

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    # pyflakes
    "F",
    # bugbear
    "B",
    # isort
    "I",
    # pyupgrade
    "UP",
    # flake8-type-checking
    "TC",
]
ignore = [
    # loop control variable not used in body
    "B007",
    # redefinition of variable name in new scope
    "F823"
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
line-ending = "lf"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--cov=src --cov-report=term-missing --no-cov-on-fail"
